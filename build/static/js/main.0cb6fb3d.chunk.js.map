{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ticket_price","tickets_sold","gym_revenue","user_pays","e","parseFloat","toFixed","setState","event","calculatePrices","target","value","base_price","_this2","_this$state","react_default","a","createElement","className","htmlFor","id","type","placeholder","onChange","updatePrice","onBlur","handlePriceBlur","updateSold","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAOqBA,qBAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,aAAc,GACdC,aAAc,EACdC,YAAa,EACbC,UAAW,GAPIX,+EAWHY,GACd,IAAMJ,EAAeK,WAAWV,KAAKI,MAAMC,cAAcM,QAAQ,GACjEX,KAAKY,SAAS,CAAEP,qDAGNQ,GACVb,KAAKc,gBAAgBD,EAAME,OAAOC,MAAOhB,KAAKI,MAAME,iDAG3CO,GACTb,KAAKc,gBAAgBd,KAAKI,MAAMC,aAAcQ,EAAME,OAAOC,+CAG7CX,EAAcC,GAC5B,IAAMW,EAAaZ,EAAeC,EAC5BE,EAAYS,GA/BwB,KA+BTZ,EAhCQ,MAgCuFC,EAC1HC,EAAcU,EA/Bc,KA+BgCA,EAElEjB,KAAKY,SAAS,CAAEP,eAAcC,eAAcC,cAAaC,+CAGlD,IAAAU,EAAAlB,KAAAmB,EACwDnB,KAAKI,MAA5DC,EADDc,EACCd,aAAcC,EADfa,EACeb,aAAcC,EAD7BY,EAC6BZ,YAAaC,EAD1CW,EAC0CX,UAEjD,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,gDAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,KACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,gBAAf,gBACAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,eAAeC,KAAK,SAASC,YAAY,OAAOC,SAAU,SAAAnB,GAAC,OAAIS,EAAKW,YAAYpB,IAAIqB,OAAQ,SAAArB,GAAC,OAAIS,EAAKa,gBAAgBtB,IAAIO,MAAOX,MAG/Ie,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,KACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,gBAAf,gBACAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,eAAeC,KAAK,SAASE,SAAU,SAAAnB,GAAC,OAAIS,EAAKc,WAAWvB,IAAIO,MAAOV,OAIvFc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,oCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,WAAMf,EAAYI,QAAQ,KAE5BS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAAf,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCf,EAAUG,QAAQ,cAnEjDsB,IAAMC,YCKnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0cb6fb3d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst FIXED_PROCESSING_FEE_PER_PARTICIPANT = 1.59;\nconst PARTICIPANT_PROCESSING_FEE_PERCENTAGE = 3.5 / 100;\nconst PLATFORM_USAGE_PERCENTAGE_FEE = 2.5 / 100;\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ticket_price: '',\n      tickets_sold: 0.00,\n      gym_revenue: 0.00,\n      user_pays: 0.00\n    };\n  }\n\n  handlePriceBlur(e) {\n    const ticket_price = parseFloat(this.state.ticket_price).toFixed(2);\n    this.setState({ ticket_price });\n  }\n\n  updatePrice(event) {\n    this.calculatePrices(event.target.value, this.state.tickets_sold);\n  }\n\n  updateSold(event) {\n    this.calculatePrices(this.state.ticket_price, event.target.value);\n  }\n\n  calculatePrices(ticket_price, tickets_sold) {\n    const base_price = ticket_price * tickets_sold;\n    const user_pays = base_price + ((ticket_price * PARTICIPANT_PROCESSING_FEE_PERCENTAGE + FIXED_PROCESSING_FEE_PER_PARTICIPANT) * tickets_sold)\n    const gym_revenue = base_price - (PLATFORM_USAGE_PERCENTAGE_FEE * base_price);\n\n    this.setState({ ticket_price, tickets_sold, gym_revenue, user_pays });\n  }\n\n  render() {\n    const { ticket_price, tickets_sold, gym_revenue, user_pays } = this.state;\n\n    return (\n      <div className='App'>\n        <div className='calculator-form'>\n          <div className='calculator-form__header'>\n            <h1>Calculate your potential earnings</h1>\n          </div>\n          <div className='calculator-form__row'>\n            <div className=\"ticket-price\">\n              <div className='dollar'>$</div>\n              <div className='form-control'>\n                <label htmlFor='ticket_price'>Ticket Price</label>\n                <input id='ticket_price' type=\"number\" placeholder='0.00' onChange={e => this.updatePrice(e)} onBlur={e => this.handlePriceBlur(e)} value={ticket_price} />\n              </div>\n            </div>\n            <span className='multiply'>X</span>\n            <div className='form-control'>\n              <label htmlFor='tickets_sold'>Tickets Sold</label>\n              <input id='tickets_sold' type='number' onChange={e => this.updateSold(e)} value={tickets_sold} />\n            </div>\n          </div>\n        </div>\n        <div className='calculator-output'>\n          <div className='calculator-output__header'>\n            <h1>Your estimated payout</h1>\n          </div>\n          <div className='calculator-output__row'>\n            <div>{gym_revenue.toFixed(2)}</div>\n          </div>\n          <div className='calculator-output__row'>\n            <div className='calculator-output__row--header'>Attendee pays</div>\n            <div className='calculator-output__row--user-pays'>{user_pays.toFixed(2)}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}